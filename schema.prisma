generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DB_URL")
}

model UserAccount {
  id              Int                    @id @unique @default(autoincrement())
  UserRel         User                   @relation(fields: [userId], references: [id])
  userId          Int                    @unique @map("user_id")
  parentAccount   Int?                   @map("parent_account")
  accountType     UserAccountType        @default(MAIN) @map("account_type")
  isActive        Boolean                @default(true) @map("is_active")
  createdAt       DateTime               @default(now()) @map("created_at") @db.Timestamp()
  createdBy       Int?                   @map("created_by")
  updatedAt       DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy       Int?                   @map("updated_by")
  InrLedgerRel    InrLedger[]
  CryptoLedgerRel CryptoLedger[]
  TradeLedgerRel  TradeLedger[]
  InrWalletRel    InrWallet?
  CryptoWalletRel CryptoWallet[]
  InrConvRel      InrConversionHistory[]

  @@index([parentAccount])
}

model User {
  id                     Int                    @id @unique @default(autoincrement())
  userType               UserType               @default(REGULAR) @map("user_type")
  signupType             SignUpType?            @map("signup_type")
  role                   Role                   @default(REGULAR) @map("role")
  email                  String                 @unique @map("email")
  phone                  String?                @unique @map("phone")
  firstName              String?                @map("first_name")
  lastName               String?                @map("last_name")
  phoneCountryCode       String                 @default("91") @map("phone_country_code")
  initVector             String?                @map("init_vector")
  password               String?                @map("encrypted_password") //encrypted
  passwordUpdatedAt      DateTime?              @map("password_updated_at")
  kycStatus              UserKycStatus          @default(PENDING) @map("kyc_status")
  kycId                  Int?                   @unique @map("kyc_id")
  UserKycRel             UserKyc?               @relation(fields: [kycId], references: [id])
  bankVerificationStatus BankVerificationStatus @default(PENDING) @map("bank_verification_status")
  bankDetailsId          Int?                   @unique @map("bank_details_id")
  BankDetailRel          UserBankDetails?       @relation(name: "UserToBankDetails", fields: [bankDetailsId], references: [id])
  isActive               Boolean                @default(true) @map("is_active")
  inrDepositEnabled      Boolean                @default(false) @map("inr_deposit_enabled")
  cryptoDepositEnabled   Boolean                @default(false) @map("crypto_deposit_enabled")
  inrWithdrawEnabled     Boolean                @default(false) @map("inr_withdraw_enabled")
  cryptoWithdrawEnabled  Boolean                @default(false) @map("crypto_withdraw_enabled")
  tradeEnabled           Boolean                @default(false) @map("trade_enabled")
  emailVerified          DateTime?              @map("email_verified")
  phoneVerified          DateTime?              @map("phone_verified")
  lastLogin              DateTime?              @map("last_login")
  createdAt              DateTime               @default(now()) @map("created_at") @db.Timestamp()
  createdBy              Int?                   @map("created_by")
  updatedAt              DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy              Int?                   @map("updated_by")
  UserBankDetailsRel     UserBankDetails[]
  FiatPaymentsRel        FiatPayments[]
  UserAccountRel         UserAccount?
  TwoFARel               TwoFA[]

  @@index([kycId])
  @@index([bankDetailsId])
}

model DepositWithdrawLimits {
  id                  Int      @id @unique @default(autoincrement())
  userType            UserType @default(REGULAR) @map("user_type")
  fiatDepositLimit    Float    @map("fiat_deposit_limit")
  fiatWithdrawLimit   Float    @map("fiat_withdraw_limit")
  cryptoDepositLimit  Float?   @map("crypto_deposit_limit")
  cryptoWithdrawLimit Float?   @map("crypto_withdraw_limit")
  createdAt           DateTime @default(now()) @map("created_at") @db.Timestamp()
  createdBy           Int      @map("created_by")
  updatedAt           DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy           Int?     @map("updated_by")
}

model TwoFA {
  id                        Int         @id @unique @default(autoincrement())
  User                      User        @relation(fields: [userId], references: [id])
  userId                    Int         @map("user_id")
  email                     String      @map("email")
  phone                     String?     @map("phone")
  emailVerified             DateTime?   @map("email_verified")
  phoneVerified             DateTime?   @map("phone_verified")
  status                    TwoFAStatus @default(INITIATED) @map("status")
  reason                    Reason      @map("reason")
  expiryTime                Int         @map("expiry_time")
  mobileVerifiedAtleastOnce Boolean     @map("mobile_verified_atleast_once")
  createdAt                 DateTime    @default(now()) @map("created_at") @db.Timestamp()
  createdBy                 Int         @map("created_by")
  updatedAt                 DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy                 Int?        @map("updated_by")
}

model UserKyc {
  id                       Int                @id @unique @default(autoincrement())
  encryptedUserDataId      Int?               @unique @map("encrypted_user_data_id")
  EncryptedUserDataRel     EncryptedUserData? @relation(fields: [encryptedUserDataId], references: [id])
  fullName                 String?            @map("full_name")
  aadharName               String?            @map("aadhar_name")
  panName                  String?            @map("pan_name")
  gender                   Gender?            @map("gender")
  aadharDob                String?            @map("aadhar_dob")
  panDob                   String?            @map("pan_dob")
  panNumber                String?            @unique @map("pan_number")
  address                  String?            @map("address")
  fatherName               String?            @map("father_name")
  kycType                  KycType            @map("kyc_type")
  kycStatus                UserKycStatus      @default(PENDING) @map("kyc_status")
  hyperVergeStatus         HypervergeStatus?  @map("hyperVergeStatus")
  panStatus                UserKycStatus      @default(PENDING) @map("pan_status")
  aadharFrontStatus        UserKycStatus      @default(PENDING) @map("aadhar_front_status")
  aadharBackStatus         UserKycStatus      @default(PENDING) @map("aadhar_back_status")
  selfieStatus             UserKycStatus      @default(PENDING) @map("selfie_status")
  aadharPanNameMatchStatus UserKycStatus      @default(PENDING) @map("aadhar_pan_name_match_status")
  aadharSelfieMatchStatus  UserKycStatus      @default(PENDING) @map("aadhar_selfie_match_status")
  createdAt                DateTime           @default(now()) @map("created_at") @db.Timestamp()
  createdBy                Int                @map("created_by")
  updatedAt                DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy                Int?               @map("updated_by")
  UserRel                  User?
}

model EncryptedUserData {
  id           Int      @id @unique @default(autoincrement())
  panNumber    String?  @map("pan_number")
  aadharNumber String?  @map("aadhar_number")
  userId       Int      @map("user_id")
  fileKey      String?  @map("file_key")
  bucketName   String?  @map("bucket_name")
  initVector   String?  @map("init_vector")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp()
  createdBy    Int      @map("created_by")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy    Int?     @map("updated_by")
  UserKyc      UserKyc?
}

model UserBankDetails {
  id                              Int                    @id @unique @default(autoincrement())
  bankDetailsType                 BankDetailsType        @default(REGULAR) @map("bank_details_type")
  userId                          Int?                   @map("user_id")
  userRel                         User?                  @relation(fields: [userId], references: [id])
  bankAccountNumber               String?                @unique @map("bank_account_number")
  bankName                        String?                @map("bank_name")
  accountHolderName               String?                @map("account_holder_name")
  ifsc                            String?                @map("ifsc")
  bankVerificationStatus          BankVerificationStatus @default(PENDING) @map("bank_verification_status")
  panAccountHolderNameMatchStatus UserKycStatus          @default(PENDING) @map("pan_account_holder_name_match_status")
  isActive                        Boolean                @default(false) @map("is_active")
  createdAt                       DateTime               @default(now()) @map("created_at") @db.Timestamp()
  createdBy                       Int                    @map("created_by")
  updatedAt                       DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy                       Int?                   @map("updated_by")
  UserBankRel                     FiatPayments[]         @relation(name: "FiatToBankDetails")
  FiatPaymentsRel                 FiatPayments[]
  UserRel                         User[]                 @relation(name: "UserToBankDetails")
}

model FiatPayments {
  id                  Int              @id @unique @default(autoincrement())
  userId              Int              @map("user_id")
  user                User?            @relation(fields: [userId], references: [id])
  paymentType         PaymentType      @map("payment_type")
  paymentStatus       PaymentStatus    @default(INITIATED) @map("payment_status")
  systemBankId        Int              @map("system_bank_id")
  systemBankRel       UserBankDetails? @relation(fields: [systemBankId], references: [id])
  userBankId          Int              @map("user_bank_id")
  userBankRel         UserBankDetails? @relation(name: "FiatToBankDetails", fields: [userBankId], references: [id])
  systemAccountNumber String           @map("system_account_number")
  userAccountNumber   String           @map("user_account_number")
  amount              Float            @map("amount")
  fee                 Float            @map("fee")
  amountCredited      Float?           @map("amount_credited")
  amountDebited       Float?           @map("amount_debited")
  bankProofUrl        String?          @map("bank_proof_url")
  receiptNumber       String?          @map("receipt_number")
  userRemarks         String?          @map("user_remarks")
  adminRemarks        String?          @map("admin_remarks")
  createdAt           DateTime         @default(now()) @map("created_at") @db.Timestamp()
  createdBy           Int              @map("created_by")
  updatedAt           DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy           Int              @map("updated_by")
  BankFeedRel         BankFeed?
}

model CryptoDeposit {
  id                   Int                    @id @unique @default(autoincrement())
  accountId            Int                    @map("account_id")
  cryptoWalletId       Int                    @map("crypto_wallet_id")
  cryptoWallet         CryptoWallet?          @relation(fields: [cryptoWalletId], references: [id])
  liminalTxnRefId      String                 @unique @map("liminal_txn_ref_id")
  coin                 String                 @map("coin")
  walletId             Int                    @map("walletId")
  timestamp            String                 @map("date")
  fee                  String?                @map("fee")
  effectiveChange      String?                @map("effective_change")
  runningBalance       String?                @map("running_balance")
  externalAddress      String?                @map("external_address")
  effectiveChangeUsd   String?                @map("effective_change_usd")
  wallet               Json?                  @map("wallet")
  tokenContractAddress String?                @map("token_contract_address")
  explorerLink         String?                @map("explorer_link")
  inputs               Json[]                 @default([]) @map("inputs")
  outputs              Json[]                 @default([]) @map("outputs")
  sequenceId           String?                @map("sequence_id")
  type                 String?                @map("type")
  conversionRate       String?                @map("conversion_rate")
  isConverted          Boolean?               @map("is_converted")
  conversionTimestamp  DateTime?              @map("conversion_timestamp")
  inrCreditStatus      InrCreditStatus        @default(PENDING) @map("inr_credit_status")
  createdAt            DateTime               @default(now()) @map("created_at") @db.Timestamp()
  createdBy            Int                    @map("created_by")
  updatedAt            DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy            Int                    @map("updated_by")
  inrConvHistRel       InrConversionHistory[]

  @@index([walletId])
}

model InrConversionHistory {
  id                   Int            @id @unique @default(autoincrement())
  cryptoDepositId      Int?           @unique @map("crypto_wallet_id")
  cryptoDeposit        CryptoDeposit? @relation(fields: [cryptoDepositId], references: [id])
  accountId            Int            @map("account_id")
  account              UserAccount    @relation(fields: [accountId], references: [id])
  baseToken            String         @map("base_token")
  baseTokenQuantity    Float          @map("base_token_quantity")
  inrValue             Float          @map("inr_value")
  inrValAfterDeduction Float          @map("inr_val_after_deduction")
  gst                  Float?         @map("gst")
  txnFee               Float?         @map("txn_fee")
  tds                  Float?         @map("tds")
  coinConversionRate   Float?         @map("usdt_conversion_rate")
  receivingAddress     String?        @map("receiving_address")
  createdAt            DateTime       @default(now()) @map("created_at") @db.Timestamp()
  createdBy            Int            @map("created_by")
  updatedAt            DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy            Int            @map("updated_by")
}

model BankFeed {
  id            Int           @id @unique @default(autoincrement())
  paymentId     Int?          @unique @map("payment_id")
  fiatPayment   FiatPayments? @relation(fields: [paymentId], references: [id])
  serialNumber  Int           @unique @map("serial_number")
  amount        String        @map("amount")
  fee           String        @map("fee")
  bankName      String        @map("bank_name")
  bankRefId     String        @map("bank_ref_id")
  processStatus ProcessStatus @map("process_status")
  userRemarks   String?       @map("user_remarks")
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamp()
  createdBy     Int           @map("created_by")
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy     Int           @map("updated_by")

  @@index([paymentId])
  @@index([bankRefId])
}

model InrLedger {
  id        Int          @id @unique @default(autoincrement())
  accountId Int          @map("account_id")
  account   UserAccount? @relation(fields: [accountId], references: [id])
  change    Float        @map("change")
  operation InrOperation @map("operation")
  timestamp DateTime     @map("timestamp")
  createdAt DateTime     @default(now()) @map("created_at") @db.Timestamp()
  createdBy Int          @map("created_by")
  updatedAt DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy Int          @map("updated_by")

  @@index([accountId])
}

model CryptoLedger {
  id        Int             @id @unique @default(autoincrement())
  accountId Int             @map("account_id")
  account   UserAccount?    @relation(fields: [accountId], references: [id])
  coin      String          @map("coin")
  change    Float           @map("change")
  operation CryptoOperation @map("operation")
  timestamp DateTime        @map("timestamp")
  createdAt DateTime        @default(now()) @map("created_at") @db.Timestamp()
  createdBy Int             @map("created_by")
  updatedAt DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy Int             @map("updated_by")

  @@index([accountId])
}

model TradeLedger {
  id           Int            @id @unique @default(autoincrement())
  accountId    Int            @unique @map("account_id")
  account      UserAccount?   @relation(fields: [accountId], references: [id])
  change       String         @map("change")
  tradeId      String         @map("trade_id")
  positionType PositionType   @map("position_type")
  operation    TradeOperation @map("operation")
  timestamp    DateTime       @map("timestamp")
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamp()
  createdBy    Int            @map("created_by")
  updatedAt    DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy    Int            @map("updated_by")

  @@index([accountId])
  @@index([tradeId])
}

model SystemConfigForDashboard {
  id              Int            @id @unique @default(autoincrement())
  parameterGroup  ParameterGroup @default(DEFAULT) @map("paramenter_group")
  parameterName   String         @unique @map("parameter_name")
  parameterType   ParamType      @map("parameter_type")
  isRanged        Boolean        @map("is_ranged")
  parameterValue  String?        @map("parameter_value")
  symbol          String?        @map("symbol")
  rangeStart      String?        @map("range_start")
  rangeEnd        String?        @map("range_end")
  roleBasedAccess Boolean        @map("role_based_access")
  role            Role           @map("role")
  createdAt       DateTime       @default(now()) @map("created_at") @db.Timestamp()
  createdBy       Int            @map("created_by")
  updatedAt       DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy       Int            @map("updated_by")

  @@index([parameterGroup])
  @@index([parameterName])
}

model SystemConfigChangeLog {
  id             Int      @id @unique @default(autoincrement())
  timestamp      DateTime @map("timestamp")
  userId         Int      @map("user_id")
  parameterName  String   @unique @map("parameter_name")
  parameterValue String?  @map("parameter_value")
  isRanged       Boolean  @map("is_ranged")
  rangeStart     String?  @map("range_start")
  rangeEnd       String?  @map("range_end")
  userType       String   @map("user_type")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp()
  createdBy      Int      @map("created_by")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy      Int      @map("updated_by")

  @@index([parameterName])
}

model InrWallet {
  id               Int          @id @unique @default(autoincrement())
  Account          UserAccount? @relation(fields: [accountId], references: [id])
  accountId        Int          @unique @map("account_id")
  walletBalance    Float        @default(0.00) @map("wallet_balance")
  amountAvailable  Float        @default(0.00) @map("amount_available")
  amountLocked     Float        @default(0.00) @map("amount_locked")
  unrealizedPnl    Float        @default(0.00) @map("unrealized_pnl")
  last24hourChange Float        @default(0.00) @map("last_24_hour_change")
  createdAt        DateTime     @default(now()) @map("created_at") @db.Timestamp()
  createdBy        Int          @map("created_by")
  updatedAt        DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy        Int          @map("updated_by")

  @@index([accountId])
}

model ParentWallet {
  id                 Int              @id @unique @default(autoincrement())
  walletId           Int              @map("wallet_id")
  walletAddress      String           @map("wallet_address")
  chain              String           @map("chain")
  coin               String           @map("coin")
  parentChain        String           @map("parent_chain")
  type               String           @map("type")
  subType            ParentWalletType @map("sub_type")
  lastUsedIndex      Int              @map("last_used_index")
  displayName        String?          @map("display_name")
  toBeDisplayed      Boolean          @default(false) @map("to_be_displayed")
  parentChainIconUrl String?          @map("parent_chain_icon_url")
  createdAt          DateTime         @default(now()) @map("created_at") @db.Timestamp()
  updatedAt          DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  childCryptoWallet  CryptoWallet[]
  parentWallet       StableCoin[]
}

model StableCoin {
  id             Int          @id @unique @default(autoincrement())
  parentWalletId Int          @map("parent_wallet_id")
  parentWallet   ParentWallet @relation(fields: [parentWalletId], references: [id])
  token          String       @map("coin")
  parentChain    String       @map("parent_chain")
  tokenIconUrl   String?      @map("icon_url")

  @@unique([parentWalletId, token])
}

model CryptoWallet {
  id              Int             @id @unique @default(autoincrement())
  accountId       Int?            @map("account_id")
  account         UserAccount?    @relation(fields: [accountId], references: [id])
  parentWalletId  Int             @map("parent_wallet_id")
  parentWallet    ParentWallet    @relation(fields: [parentWalletId], references: [id])
  liminalRefId    String          @map("liminal_ref_id") //this path is the child path to the parent wallet path created
  liminalParentId Int             @map("liminal_parent_id")
  liminalCoin     String          @map("liminal_coin")
  liminalChain    String          @map("liminal_chain")
  //coin           Coin            @map("coin")
  //network        Network         @map("network")
  publicAddress   String          @map("public_address")
  balance         Float           @default(0.00) @map("balance")
  lastConversion  DateTime?       @map("last_conversion")
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamp()
  createdBy       Int             @map("created_by")
  updatedAt       DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy       Int             @map("updated_by")
  cryptoDeposit   CryptoDeposit[]

  @@unique([liminalCoin, publicAddress])
  @@index([accountId])
  @@index([liminalRefId])
}

model PerpetualContracts {
  id             Int      @id @unique @default(autoincrement())
  contractSymbol String   @unique @map("contract_symbol")
  displayName    String   @map("display_name")
  systemConfig   Json     @map("system_config")
  exchangeConfig Json     @map("exchange_config")
  isActive       Boolean  @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp()
  createdBy      Int      @map("created_by")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy      Int      @map("updated_by")

  @@index([contractSymbol])
}

model KlineHistoricalData {
  id             Int      @id @unique @default(autoincrement())
  contractSymbol String   @map("contract_symbol")
  displayName    String   @map("display_name")
  interval       Interval @map("interval")
  ohlc           Json     @map("ohlc")
  conversionRate String   @map("conversion_rate")
  startTime      BigInt   @map("start_time")
  endTime        BigInt   @map("end_time")
  timestampIst   String   @map("timestamp_ist")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp()
  createdBy      Int      @map("created_by")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy      Int      @map("updated_by")
}

model UserOrderHistory {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  createdBy Int      @map("created_by")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy Int      @map("updated_by")
}

model UserTradeHistory {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  createdBy Int      @map("created_by")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy Int      @map("updated_by")
}

model UserPositionHistory {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  createdBy Int      @map("created_by")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy Int      @map("updated_by")
}

model BinanceOrderHistory {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  createdBy Int      @map("created_by")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy Int      @map("updated_by")
}

model BinanceTradeHistory {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  createdBy Int      @map("created_by")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy Int      @map("updated_by")
}

model CoinwiseTradeRecoincilliation {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  createdBy Int      @map("created_by")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy Int      @map("updated_by")
}

model CoinwisePositionRecoincilliation {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  createdBy Int      @map("created_by")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy Int      @map("updated_by")
}

model Invoices {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  createdBy Int      @map("created_by")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy Int      @map("updated_by")
}

model Reports {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  createdBy Int      @map("created_by")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  updatedBy Int      @map("updated_by")
}

enum UserAccountType {
  MAIN
  SUBACCOUNT
}

enum UserType {
  REGULAR
  SYSTEM
  ADMIN
}

enum Network {
  ERC20
  BEP20
  TRX20
}

enum BankDetailsType {
  REGULAR
  SYSTEM
}

enum KycType {
  REGULAR
  ADVANCED
}

enum UserKycStatus {
  PENDING
  INITIATED
  SUCCESS
  FAILED
  MANUALLY_APPROVED
  MANUALLY_DECLINED
  NEEDS_REVIEW
}

enum Gender {
  M
  F
  O
}

enum HypervergeStatus {
  STARTED
  ERROR
  USER_CANCELLED
  AUTO_APPROVED
  NEEDS_REVIEW
  AUTO_DECLINED
  MANUALLY_APPROVED
  MANUALLY_DECLINED
}

enum PaymentType {
  DEPOSIT
  WITHDRAWAL
}

enum PaymentStatus {
  INITIATED
  SUCCESS
  FAILED
  REFUND
  PENDING
}

enum InrCreditStatus {
  PENDING
  SUCCESS
  FAILED
}

enum ProcessStatus {
  INITIATED
  APPROVED
  REJECTED
}

enum BankVerificationStatus {
  PENDING
  INITIATED
  VERIFIED
  REJECTED
  NEEDS_REVIEW
}

enum InrOperation {
  DEPOSIT
  WITHDRAW
  REFUND
  FEE
  REBATE
  GST
  TDS
}

enum CryptoOperation {
  DEPOSIT
  WITHDRAW
  CONVERSION
}

enum TradeOperation {
  BUY
  SELL
  FEE
  FUNDINGFEE
  COMISSION
}

enum PositionType {
  LONG
  SHORT
}

enum ParamType {
  GLOBAL
  SYMBOL
}

enum Interval {
  I_1m
  I_3m
  I_5m
  I_15m
  I_30m
  I_1h
  I_2h
  I_4h
  I_6h
  I_8h
  I_12h
  I_1d
  I_3d
  I_1w
  I_1M
}

enum Role {
  REGULAR
  ADMIN
  SYSTEM
}

enum Coin {
  BTCINR
  XRPINR
}

enum TwoFAStatus {
  INITIATED
  EMAILVERIFIED
  PHONEVERIFIED
  COMPLETED
  FAILED
}

enum Reason {
  SIGNUP
  LOGIN
  WITHDRAW
  FORGOTPASSWORD
}

enum SignUpType {
  FACEBOOK
  GITHUB
  GOOGLE
  LINKEDIN
  TWITTER
  EMAIL
}

enum FeeType {
  TRADE_COMMISION
  FIAT_WITHDRAW
  FIAT_DEPOSIT
  CRYPTO_DEPOSIT
  CRYPTO_WITHDRAW
  STABLE_COIN_CONVERSION
  FUNDING_RATE
}

enum FeeCurrency {
  FIAT
  CRYPTO
}

enum FeeDeductionType {
  FIXED
  DYNAMIC
}

enum FeeFrequency {
  ONE_TIME
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum ParameterGroup {
  DEFAULT
  MARKET
  DEPOSIT
  WITHDRAW
  USER_CONFIG
  TRADE_CONFIG
  CONTRACT_CONFIG
  FEE_CONFIG
  RISK_MANAGEMENT
  CONVERSION_RATE
}

enum ParentWalletType {
  DEPOSIT
  WITHDRAWAL
}
