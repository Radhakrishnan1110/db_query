
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.3.1
 * Query Engine version: 61e140623197a131c2a6189271ffee05a7aa9a59
 */
Prisma.prismaVersion = {
  client: "5.3.1",
  engine: "61e140623197a131c2a6189271ffee05a7aa9a59"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserAccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  parentAccount: 'parentAccount',
  accountType: 'accountType',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  userType: 'userType',
  signupType: 'signupType',
  role: 'role',
  email: 'email',
  phone: 'phone',
  firstName: 'firstName',
  lastName: 'lastName',
  phoneCountryCode: 'phoneCountryCode',
  initVector: 'initVector',
  password: 'password',
  passwordUpdatedAt: 'passwordUpdatedAt',
  kycStatus: 'kycStatus',
  kycId: 'kycId',
  bankVerificationStatus: 'bankVerificationStatus',
  bankDetailsId: 'bankDetailsId',
  isActive: 'isActive',
  inrDepositEnabled: 'inrDepositEnabled',
  cryptoDepositEnabled: 'cryptoDepositEnabled',
  inrWithdrawEnabled: 'inrWithdrawEnabled',
  cryptoWithdrawEnabled: 'cryptoWithdrawEnabled',
  tradeEnabled: 'tradeEnabled',
  emailVerified: 'emailVerified',
  phoneVerified: 'phoneVerified',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.DepositWithdrawLimitsScalarFieldEnum = {
  id: 'id',
  userType: 'userType',
  fiatDepositLimit: 'fiatDepositLimit',
  fiatWithdrawLimit: 'fiatWithdrawLimit',
  cryptoDepositLimit: 'cryptoDepositLimit',
  cryptoWithdrawLimit: 'cryptoWithdrawLimit',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.TwoFAScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  email: 'email',
  phone: 'phone',
  emailVerified: 'emailVerified',
  phoneVerified: 'phoneVerified',
  status: 'status',
  reason: 'reason',
  expiryTime: 'expiryTime',
  mobileVerifiedAtleastOnce: 'mobileVerifiedAtleastOnce',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.UserKycScalarFieldEnum = {
  id: 'id',
  encryptedUserDataId: 'encryptedUserDataId',
  fullName: 'fullName',
  gender: 'gender',
  dob: 'dob',
  address: 'address',
  fatherName: 'fatherName',
  kycType: 'kycType',
  kycStatus: 'kycStatus',
  hyperVergeStatus: 'hyperVergeStatus',
  panStatus: 'panStatus',
  aadharFrontStatus: 'aadharFrontStatus',
  aadharBackStatus: 'aadharBackStatus',
  selfieStatus: 'selfieStatus',
  aadharPanNameMatchStatus: 'aadharPanNameMatchStatus',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.EncryptedUserDataScalarFieldEnum = {
  id: 'id',
  panNumber: 'panNumber',
  aadharNumber: 'aadharNumber',
  userId: 'userId',
  fileKey: 'fileKey',
  bucketName: 'bucketName',
  initVector: 'initVector',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.UserBankDetailsScalarFieldEnum = {
  id: 'id',
  bankDetailsType: 'bankDetailsType',
  userId: 'userId',
  bankAccountNumber: 'bankAccountNumber',
  bankName: 'bankName',
  accountHolderName: 'accountHolderName',
  ifsc: 'ifsc',
  bankVerificationStatus: 'bankVerificationStatus',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.FiatPaymentsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  paymentType: 'paymentType',
  paymentStatus: 'paymentStatus',
  systemBankId: 'systemBankId',
  userBankId: 'userBankId',
  systemAccountNumber: 'systemAccountNumber',
  userAccountNumber: 'userAccountNumber',
  amount: 'amount',
  fee: 'fee',
  amountCredited: 'amountCredited',
  amountDebited: 'amountDebited',
  bankProofUrl: 'bankProofUrl',
  receiptNumber: 'receiptNumber',
  userRemarks: 'userRemarks',
  adminRemarks: 'adminRemarks',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.CryptoDepositScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  cryptoWalletId: 'cryptoWalletId',
  liminalTxnRefId: 'liminalTxnRefId',
  coin: 'coin',
  walletId: 'walletId',
  timestamp: 'timestamp',
  fee: 'fee',
  effectiveChange: 'effectiveChange',
  runningBalance: 'runningBalance',
  externalAddress: 'externalAddress',
  effectiveChangeUsd: 'effectiveChangeUsd',
  wallet: 'wallet',
  tokenContractAddress: 'tokenContractAddress',
  explorerLink: 'explorerLink',
  inputs: 'inputs',
  outputs: 'outputs',
  sequenceId: 'sequenceId',
  type: 'type',
  conversionRate: 'conversionRate',
  isConverted: 'isConverted',
  conversionTimestamp: 'conversionTimestamp',
  inrCreditStatus: 'inrCreditStatus',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.InrConversionHistoryScalarFieldEnum = {
  id: 'id',
  cryptoDepositId: 'cryptoDepositId',
  accountId: 'accountId',
  baseToken: 'baseToken',
  baseTokenQuantity: 'baseTokenQuantity',
  inrValue: 'inrValue',
  inrValAfterDeduction: 'inrValAfterDeduction',
  gst: 'gst',
  txnFee: 'txnFee',
  tds: 'tds',
  coinConversionRate: 'coinConversionRate',
  receivingAddress: 'receivingAddress',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.BankFeedScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  serialNumber: 'serialNumber',
  amount: 'amount',
  fee: 'fee',
  bankName: 'bankName',
  bankRefId: 'bankRefId',
  processStatus: 'processStatus',
  userRemarks: 'userRemarks',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.InrLedgerScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  change: 'change',
  operation: 'operation',
  timestamp: 'timestamp',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.CryptoLedgerScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  coin: 'coin',
  change: 'change',
  operation: 'operation',
  timestamp: 'timestamp',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.TradeLedgerScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  change: 'change',
  tradeId: 'tradeId',
  positionType: 'positionType',
  operation: 'operation',
  timestamp: 'timestamp',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.SystemConfigForDashboardScalarFieldEnum = {
  id: 'id',
  parameterGroup: 'parameterGroup',
  parameterName: 'parameterName',
  parameterType: 'parameterType',
  isRanged: 'isRanged',
  parameterValue: 'parameterValue',
  symbol: 'symbol',
  rangeStart: 'rangeStart',
  rangeEnd: 'rangeEnd',
  roleBasedAccess: 'roleBasedAccess',
  role: 'role',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.SystemConfigChangeLogScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  userId: 'userId',
  parameterName: 'parameterName',
  parameterValue: 'parameterValue',
  isRanged: 'isRanged',
  rangeStart: 'rangeStart',
  rangeEnd: 'rangeEnd',
  userType: 'userType',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.InrWalletScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  walletBalance: 'walletBalance',
  amountAvailable: 'amountAvailable',
  amountLocked: 'amountLocked',
  unrealizedPnl: 'unrealizedPnl',
  last24hourChange: 'last24hourChange',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ParentWalletScalarFieldEnum = {
  id: 'id',
  walletId: 'walletId',
  walletAddress: 'walletAddress',
  chain: 'chain',
  coin: 'coin',
  parentChain: 'parentChain',
  type: 'type',
  subType: 'subType',
  lastUsedIndex: 'lastUsedIndex',
  displayName: 'displayName',
  toBeDisplayed: 'toBeDisplayed',
  parentChainIconUrl: 'parentChainIconUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StableCoinScalarFieldEnum = {
  id: 'id',
  parentWalletId: 'parentWalletId',
  token: 'token',
  parentChain: 'parentChain',
  tokenIconUrl: 'tokenIconUrl'
};

exports.Prisma.CryptoWalletScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  parentWalletId: 'parentWalletId',
  liminalRefId: 'liminalRefId',
  liminalParentId: 'liminalParentId',
  liminalCoin: 'liminalCoin',
  liminalChain: 'liminalChain',
  publicAddress: 'publicAddress',
  balance: 'balance',
  lastConversion: 'lastConversion',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.PerpetualContractsScalarFieldEnum = {
  id: 'id',
  contractSymbol: 'contractSymbol',
  displayName: 'displayName',
  systemConfig: 'systemConfig',
  exchangeConfig: 'exchangeConfig',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.KlineHistoricalDataScalarFieldEnum = {
  id: 'id',
  contractSymbol: 'contractSymbol',
  displayName: 'displayName',
  interval: 'interval',
  ohlc: 'ohlc',
  conversionRate: 'conversionRate',
  startTime: 'startTime',
  endTime: 'endTime',
  timestampIst: 'timestampIst',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.UserOrderHistoryScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.UserTradeHistoryScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.UserPositionHistoryScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.BinanceOrderHistoryScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.BinanceTradeHistoryScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.CoinwiseTradeRecoincilliationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.CoinwisePositionRecoincilliationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.InvoicesScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ReportsScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserAccountType = exports.$Enums.UserAccountType = {
  MAIN: 'MAIN',
  SUBACCOUNT: 'SUBACCOUNT'
};

exports.UserType = exports.$Enums.UserType = {
  REGULAR: 'REGULAR',
  SYSTEM: 'SYSTEM',
  ADMIN: 'ADMIN'
};

exports.SignUpType = exports.$Enums.SignUpType = {
  FACEBOOK: 'FACEBOOK',
  GITHUB: 'GITHUB',
  GOOGLE: 'GOOGLE',
  LINKEDIN: 'LINKEDIN',
  TWITTER: 'TWITTER',
  EMAIL: 'EMAIL'
};

exports.Role = exports.$Enums.Role = {
  REGULAR: 'REGULAR',
  ADMIN: 'ADMIN',
  SYSTEM: 'SYSTEM'
};

exports.UserKycStatus = exports.$Enums.UserKycStatus = {
  PENDING: 'PENDING',
  INITIATED: 'INITIATED',
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED',
  MANUALLY_APPROVED: 'MANUALLY_APPROVED',
  MANUALLY_DECLINED: 'MANUALLY_DECLINED',
  NEEDS_REVIEW: 'NEEDS_REVIEW'
};

exports.BankVerificationStatus = exports.$Enums.BankVerificationStatus = {
  PENDING: 'PENDING',
  INITIATED: 'INITIATED',
  VERIFIED: 'VERIFIED',
  REJECTED: 'REJECTED'
};

exports.TwoFAStatus = exports.$Enums.TwoFAStatus = {
  INITIATED: 'INITIATED',
  EMAILVERIFIED: 'EMAILVERIFIED',
  PHONEVERIFIED: 'PHONEVERIFIED',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.Reason = exports.$Enums.Reason = {
  SIGNUP: 'SIGNUP',
  LOGIN: 'LOGIN',
  WITHDRAW: 'WITHDRAW',
  FORGOTPASSWORD: 'FORGOTPASSWORD'
};

exports.Gender = exports.$Enums.Gender = {
  M: 'M',
  F: 'F',
  O: 'O'
};

exports.KycType = exports.$Enums.KycType = {
  REGULAR: 'REGULAR',
  ADVANCED: 'ADVANCED'
};

exports.HypervergeStatus = exports.$Enums.HypervergeStatus = {
  STARTED: 'STARTED',
  ERROR: 'ERROR',
  USER_CANCELLED: 'USER_CANCELLED',
  AUTO_APPROVED: 'AUTO_APPROVED',
  NEEDS_REVIEW: 'NEEDS_REVIEW',
  AUTO_DECLINED: 'AUTO_DECLINED',
  MANUALLY_APPROVED: 'MANUALLY_APPROVED',
  MANUALLY_DECLINED: 'MANUALLY_DECLINED'
};

exports.BankDetailsType = exports.$Enums.BankDetailsType = {
  REGULAR: 'REGULAR',
  SYSTEM: 'SYSTEM'
};

exports.PaymentType = exports.$Enums.PaymentType = {
  DEPOSIT: 'DEPOSIT',
  WITHDRAWAL: 'WITHDRAWAL'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  INITIATED: 'INITIATED',
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED',
  REFUND: 'REFUND',
  PENDING: 'PENDING'
};

exports.InrCreditStatus = exports.$Enums.InrCreditStatus = {
  PENDING: 'PENDING',
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED'
};

exports.ProcessStatus = exports.$Enums.ProcessStatus = {
  INITIATED: 'INITIATED',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.InrOperation = exports.$Enums.InrOperation = {
  DEPOSIT: 'DEPOSIT',
  WITHDRAW: 'WITHDRAW',
  REFUND: 'REFUND',
  FEE: 'FEE',
  REBATE: 'REBATE',
  GST: 'GST',
  TDS: 'TDS'
};

exports.CryptoOperation = exports.$Enums.CryptoOperation = {
  DEPOSIT: 'DEPOSIT',
  WITHDRAW: 'WITHDRAW',
  CONVERSION: 'CONVERSION'
};

exports.PositionType = exports.$Enums.PositionType = {
  LONG: 'LONG',
  SHORT: 'SHORT'
};

exports.TradeOperation = exports.$Enums.TradeOperation = {
  BUY: 'BUY',
  SELL: 'SELL',
  FEE: 'FEE',
  FUNDINGFEE: 'FUNDINGFEE',
  COMISSION: 'COMISSION'
};

exports.ParameterGroup = exports.$Enums.ParameterGroup = {
  DEFAULT: 'DEFAULT',
  MARKET: 'MARKET',
  DEPOSIT: 'DEPOSIT',
  WITHDRAW: 'WITHDRAW',
  USER_CONFIG: 'USER_CONFIG',
  TRADE_CONFIG: 'TRADE_CONFIG',
  CONTRACT_CONFIG: 'CONTRACT_CONFIG',
  FEE_CONFIG: 'FEE_CONFIG',
  RISK_MANAGEMENT: 'RISK_MANAGEMENT',
  CONVERSION_RATE: 'CONVERSION_RATE'
};

exports.ParamType = exports.$Enums.ParamType = {
  GLOBAL: 'GLOBAL',
  SYMBOL: 'SYMBOL'
};

exports.ParentWalletType = exports.$Enums.ParentWalletType = {
  DEPOSIT: 'DEPOSIT',
  WITHDRAWAL: 'WITHDRAWAL'
};

exports.Interval = exports.$Enums.Interval = {
  I_1m: 'I_1m',
  I_3m: 'I_3m',
  I_5m: 'I_5m',
  I_15m: 'I_15m',
  I_30m: 'I_30m',
  I_1h: 'I_1h',
  I_2h: 'I_2h',
  I_4h: 'I_4h',
  I_6h: 'I_6h',
  I_8h: 'I_8h',
  I_12h: 'I_12h',
  I_1d: 'I_1d',
  I_3d: 'I_3d',
  I_1w: 'I_1w',
  I_1M: 'I_1M'
};

exports.Prisma.ModelName = {
  UserAccount: 'UserAccount',
  User: 'User',
  DepositWithdrawLimits: 'DepositWithdrawLimits',
  TwoFA: 'TwoFA',
  UserKyc: 'UserKyc',
  EncryptedUserData: 'EncryptedUserData',
  UserBankDetails: 'UserBankDetails',
  FiatPayments: 'FiatPayments',
  CryptoDeposit: 'CryptoDeposit',
  InrConversionHistory: 'InrConversionHistory',
  BankFeed: 'BankFeed',
  InrLedger: 'InrLedger',
  CryptoLedger: 'CryptoLedger',
  TradeLedger: 'TradeLedger',
  SystemConfigForDashboard: 'SystemConfigForDashboard',
  SystemConfigChangeLog: 'SystemConfigChangeLog',
  InrWallet: 'InrWallet',
  ParentWallet: 'ParentWallet',
  StableCoin: 'StableCoin',
  CryptoWallet: 'CryptoWallet',
  PerpetualContracts: 'PerpetualContracts',
  KlineHistoricalData: 'KlineHistoricalData',
  UserOrderHistory: 'UserOrderHistory',
  UserTradeHistory: 'UserTradeHistory',
  UserPositionHistory: 'UserPositionHistory',
  BinanceOrderHistory: 'BinanceOrderHistory',
  BinanceTradeHistory: 'BinanceTradeHistory',
  CoinwiseTradeRecoincilliation: 'CoinwiseTradeRecoincilliation',
  CoinwisePositionRecoincilliation: 'CoinwisePositionRecoincilliation',
  Invoices: 'Invoices',
  Reports: 'Reports'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
